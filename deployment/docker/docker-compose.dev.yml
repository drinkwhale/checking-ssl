version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: ssl-checker-postgres
    environment:
      POSTGRES_DB: ssl_checker
      POSTGRES_USER: ssl_user
      POSTGRES_PASSWORD: ssl_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ssl-checker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ssl_user -d ssl_checker"]
      interval: 30s
      timeout: 10s
      retries: 5

  # SSL Checker 백엔드 애플리케이션
  ssl-checker-backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: ssl-checker-backend
    environment:
      DATABASE_URL: postgresql://ssl_user:ssl_password@postgres:5432/ssl_checker
      APP_NAME: SSL Certificate Monitor
      DEBUG: "true"
      LOG_LEVEL: debug
      ENABLE_SCHEDULER: "true"
      SSL_CHECK_CRON: "0 9 * * 1"
      NOTIFICATION_ENABLED: "false"  # 개발환경에서는 알림 비활성화
      SSL_TIMEOUT_SECONDS: 10
      MAX_CONCURRENT_CHECKS: 5
    ports:
      - "8000:8000"
    volumes:
      - ../../backend/src:/app/src:ro
      - ssl_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ssl-checker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 웹 프론트엔드 (nginx를 통한 정적 파일 서빙)
  ssl-checker-frontend:
    image: nginx:alpine
    container_name: ssl-checker-frontend
    ports:
      - "3000:80"
    volumes:
      - ../../frontend/src:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ssl-checker-backend
    networks:
      - ssl-checker-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  ssl_logs:
    driver: local

networks:
  ssl-checker-network:
    driver: bridge